unit barterp;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, ExtCtrls;

type
  TForm1 = class(TForm)
    Button1: TButton;
    Label2: TLabel;
    NumAgentsHBox: TEdit;
    NumAgentsFBox: TEdit;
    Label3: TLabel;
    Button2: TButton;
    Button3: TButton;
    CurrentRound: TEdit;
    Label4: TLabel;
    Label5: TLabel;
    MutationRateBox: TEdit;
    TotalPeriodsBox: TEdit;
    ShowPayoffsBox: TCheckBox;
    ShowRelPricesBox: TCheckBox;
    Label9: TLabel;
    CheckPeriodBox: TEdit;
    Label10: TLabel;
    ReplacementRateBox: TEdit;
    Label12: TLabel;
    NumGoodsBox: TEdit;
    Label13: TLabel;
    MaxLabourBox: TEdit;
    Label14: TLabel;
    OXBox: TEdit;
    Label11: TLabel;
    ProducerShiftRateBox: TEdit;
    VarySupplyCkBox: TCheckBox;
    PauseBtn: TButton;
    Label1: TLabel;
    ReproducePeriodBox: TEdit;
    MaxGoodsBox: TEdit;
    MinWageBox: TEdit;
    Label7: TLabel;
    CheckBox1: TCheckBox;
    Label8: TLabel;
    Label15: TLabel;
    CalcPriceDispersionBox: TCheckBox;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Button3Click(Sender: TObject);
    procedure Button2MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure VarySupplyCkBoxClick(Sender: TObject);
    procedure PauseBtnClick(Sender: TObject);
  private
  public
    Running : Boolean;
  end;
  RealArray = Array of Extended;

  AgentH = class(TObject)
    Produces,Index,LabourH : Integer;
    Kill,Reproduce : Boolean;
    P,X,Wh : RealArray;
    Income,Score : Extended;
    Constructor Init1(I,Ind : Integer);
    Procedure PriceMutateH(N : Integer);
    Procedure CopyH(K,N : Integer); overload;
  end;

  AgentF = class(TObject)
    Index,Produces,LabourF : Integer;
    Kill,Reproduce : Boolean;
    Q,Y,Wf : RealArray;
    Profit,Fitness : Extended;
    Constructor Init2(I,Ind : Integer);
    Procedure CopyF(K,N : Integer); overload;
    Procedure PriceMutateF(N : Integer);
  end;

  Intarray = Array of Integer;
  var
  NumGoods : Integer;
  OX : Array of Extended;
  Form1: TForm1;

implementation

{$R *.DFM}

uses Math,Pile,InputParameters, PriceMeter, XYGraphu, StatisticsU;

var
  AgentsF : Array of Array of AgentF;
  AgentsH : Array of Array of AgentH;
  PAgents : Array of Intarray;
  PGoods : IntArray;
  HAgents : Array of IntArray;
  ReproducePeriod,CheckPeriod,Periods : Integer;
  MaxGoodsTries : Integer;
  MaxLabourTries : Integer;
  MinWage : Extended;
  TotalAgentsF,TotalAgentsH: Integer;
  NumAgentsF : Array of Integer;
  NumAgentsH : Array of Integer;
  AvePrice,AvePDev,AveHPrice,AveFPrice : RealArray;
  ScoreAve,ProfitAve : RealArray;
  TotalAgents : Integer;
  TotalPeriods : Longint;
	RSeed : Longint = 123456;
  CalcPriceDispersion,VarySupply,
    HaltSimulation,Pausing,Running : Boolean;
  NegP,AverageScore,AverageProfit,CommonPriceScore,ReplacementRate,
    DepreciationRate,ProducerShiftRate,MRate,TotalAgentsHH,TotalAgentsFF : Extended;

var
  PriceGraph,PopGraph,StdDevGraph,InventoryGraph : TXYGraph;

Constructor AgentH.Init1(I,Ind : Integer);
begin
  inherited Create;
  Index := Ind;
  Score := 0;
  LabourH := 1;
  Income := 0;
  Produces := I;
  SetLength(P,NumGoods+1);
  SetLength(X,NumGoods+1);
  SetLength(Wh,NumGoods+1);
end;

Constructor AgentF.Init2(I,Ind : Integer);
begin
  inherited Create;
  Index := Ind;
  Profit := 0;
  Produces := I;
  LabourF := 0;
  SetLength(Q,NumGoods+1);
  SetLength(Y,NumGoods+1);
  SetLength(Wf,NumGoods+1);
end;

// draft copy and mutation procedures

// Household price mutation
Procedure AgentH.PriceMutateH(N : Integer);
const
  delta = 0.95;
var
  I : Integer;
begin
  for I := 1 to NumGoods do begin
    P[I] := AgentsH[Produces,N].P[I];
    if (Random < MRate) then begin
      if Random < 0.5 then P[I] := P[I]*delta
      else P[I] := P[I]/delta;
      if Random < 0.5 then Wh[Produces] := Wh[Produces]*Delta
      else Wh[Produces] := Wh[Produces]/Delta;
    end;
  end;
end;

// Firm price mutation
Procedure AgentF.PriceMutateF(N : Integer);
const
  delta = 0.95;
var
  I : Integer;
begin
  for I := 1 to NumGoods do begin
    Q[I] := AgentsF[Produces,N].Q[I];
    if (Random < MRate) then begin
      if Random < 0.5 then Q[I] := Q[I]*Delta
      else Q[I] := Q[I]/Delta;
      if Random < 0.5 then Wf[Produces] := Wf[Produces]*Delta
      else Wf[Produces] := Wf[Produces]/Delta;
    end;
  end;
end;

Procedure AgentF.CopyF(K,N : Integer);
var
  I,OldIndex,OldProduces: Integer;
begin
  if NumAgentsF[Produces] < 10 then Exit;
  OldIndex := Index;
  OldProduces := Produces;
  AgentsF[K,NumAgentsF[K]+1] := Self;
  for I := 1 to NumGoods do begin
    Q[I] := AgentsF[K,N].Q[I];
    Wf[I] := AgentsF[K,N].Wf[I];
  end;
  Produces := K;
  Inc(NumAgentsF[K]);
  Index := NumAgentsF[K];
  if OldIndex <> NumAgentsF[OldProduces] then begin
    AgentsF[OldProduces,OldIndex] := AgentsF[OldProduces,NumAgentsF[OldProduces]];
    AgentsF[OldProduces,OldIndex].Index := OldIndex;
  end;
  Dec(NumAgentsF[OldProduces]);
end;

Procedure AgentH.CopyH(K,N : Integer);
var
  I,OldIndex,OldProduces: Integer;
begin
  if NumAgentsH[Produces] < 10 then Exit;
  OldIndex := Index;
  OldProduces := Produces;
  AgentsH[K,NumAgentsH[K]+1] := Self;
  for I := 1 to NumGoods do begin
    P[I] := AgentsH[K,N].P[I];
    Wh[I] := AgentsH[K,N].Wh[I];
  end;
  Produces := K;
  Inc(NumAgentsH[K]);
  Index := NumAgentsH[K];
  if OldIndex <> NumAgentsH[OldProduces] then begin
    AgentsH[OldProduces,OldIndex] := AgentsH[OldProduces,NumAgentsH[OldProduces]];
    AgentsH[OldProduces,OldIndex].Index := OldIndex;
  end;
  Dec(NumAgentsF[OldProduces]);
end;

// get next gen households
Procedure GetNextGenerationH1(G : Integer);
var
	I,J,K,Replacements : Integer;
begin
	Replacements := Round(NumAgentsH[G]*ReplacementRate);
  if Replacements = 0 then Inc(Replacements);
  for I := 1 to Replacements do begin
    Application.ProcessMessages;
    if HaltSimulation then Exit;
    J := 1 + Random(NumAgentsH[G]);
    K := 1 + Random(NumAgentsH[G]);
    if AgentsH[G,J].Score > AgentsH[G,K].Score then
      AgentsH[G,K].PriceMutateH(J)
    else AgentsH[G,J].PriceMutateH(K);
  end;
end;

// get next gen firms
Procedure GetNextGenerationF1(G : Integer);
var
	I,J,K,Replacements : Integer;
begin
	Replacements := Round(NumAgentsF[G]*ReplacementRate);
  if Replacements = 0 then Inc(Replacements);
  for I := 1 to Replacements do begin
    Application.ProcessMessages;
    if HaltSimulation then Exit;
    J := 1 + Random(NumAgentsF[G]);
    K := 1 + Random(NumAgentsF[G]);
    if AgentsF[G,J].Profit > AgentsF[G,K].Profit then
      AgentsF[G,K].PriceMutateF(J)
    else AgentsF[G,J].PriceMutateF(K);
  end;
end;

Procedure ProducerShift;
var
	I,J,K,L,M,N,Replacements : Integer;
begin
	Replacements := Round(TotalAgents*ProducerShiftRate);
  for I := 1 to NumGoods do begin
    for J := 1 to Replacements do begin
      Application.ProcessMessages;
      if HaltSimulation then Exit;
      K := 1 + Random(NumGoods);
      repeat
        L := 1 + Random(NumGoods);
      until L <> K;
      M := 1 + Random(NumGoods);
      N := 1 + Random(NumAgentsF[M]);
      if ProfitAve[K] < ProfitAve[L] then AgentsF[K,M].CopyF(L,N)
      else AgentsF[L,N].CopyF(K,M);
    end;
  end;
end;

Procedure LabourShift;
var
	I,J,K,L,M,N,Replacements : Integer;
begin
	Replacements := Round(TotalAgents*ProducerShiftRate);
  for I := 1 to NumGoods do begin
    for J := 1 to Replacements do begin
      Application.ProcessMessages;
      if HaltSimulation then Exit;
      K := 1 + Random(NumGoods);
      repeat
        L := 1 + Random(NumGoods);
      until L <> K;
      M := 1 + Random(NumGoods);
      N := 1 + Random(NumAgentsH[M]);
      if ScoreAve[K] < ScoreAve[L] then AgentsH[K,M].CopyH(L,N)
      else AgentsH[L,N].CopyH(K,M);
    end;
  end;
end;

Procedure Shuffle(Permute: IntArray;Size : Integer);
var
  I : Integer;
  Pile : PileClass;
begin
  Pile := PileClass.Create(Size);
  for I := 1 to Size do Permute[I] := Pile.ChooseRandom;
  Pile.Destroy;
end;

Procedure LabourPlay;
var
  G,I,J,K,L : Integer;
  A : AgentH;
begin
  Shuffle(PGoods,NumGoods);
  for I := 1 to NumGoods do Shuffle(HAgents[PGoods[I]],NumAgentsH[PGoods[I]]);
  for I := 1 to NumGoods do begin
    for J := 1 to NumAgentsH[PGoods[I]] do begin
      A := AgentsH[PGoods[I],HAgents[PGoods[I],J] ];
      Assert(Assigned(A));
      if A.LabourH = 1 then begin;
            for G := 1 to MaxLabourTries do begin;
            K := A.Produces;
            L := 1 + Random(NumAgentsF[K]);
                  if AgentsF[K,L].LabourF = 0 then begin
                  if (A.Wh[K] + AgentsF[K,L].Wf[K])/2 > MinWage then begin
                  if (A.Wh[K] + AgentsF[K,L].Wf[K])/2 < AgentsF[K,L].Q[K] then begin
                     A.Income := (A.Wh[K] + AgentsF[K,L].Wf[K])/2;
                     AgentsF[K,L].Profit := AgentsF[K,L].Profit - (A.Wh[K] + AgentsF[K,L].Wf[K])/2;
                     A.LabourH := 0;
                     AgentsF[K,L].LabourF := 1;
                     AgentsF[K,L].Y[K] := 1;
                     Break;
       end;
      end;
     end;
    end;
  end;
end;
end;
end;


Procedure GoodsPlay;
var
  I,J,K,L,M : Integer;
  A : AgentF;
begin
  NegP := 0;
  Shuffle(PGoods,NumGoods);
  for I := 1 to NumGoods do Shuffle(PAgents[PGoods[I]],NumAgentsF[PGoods[I]]);
  for I := 1 to NumGoods do begin
    for J := 1 to NumAgentsF[PGoods[I]] do begin
      A := AgentsF[PGoods[I],PAgents[PGoods[I],J]];
      Assert(Assigned(A));
      if A.Y[A.Produces] = 1 then begin
        for M := 1 to MaxGoodsTries do begin
        K := 1 + Random(NumGoods);
        L := 1 + Random(NumAgentsH[K]);
        NegP := (AgentsH[K,L].P[A.Produces] + A.Q[A.Produces])/2;
          if AgentsH[K,L].X[A.Produces] = 0 then begin
          if AgentsH[K,L].Income > NegP then begin
              AgentsH[K,L].X[A.Produces] := 1;
              AgentsH[K,L].Income := AgentsH[K,L].Income - NegP;
              AgentsH[K,L].Score := AgentsH[K,L].Score + OX[A.Produces]/NegP;
              A.Y[A.Produces] := 0;
              A.Profit := A.Profit + (AgentsH[K,L].P[A.Produces] + A.Q[A.Produces])/2;
              Break;
            end;
          end;
        end;
      end;
    end;
  end;
end;

Procedure InitializePayoffsGraph;
const
  GraphHeight = 300;
  GraphWidth = 550;
var
  I : Integer;
begin
  with XYGraph do begin
    Initialize(GraphWidth,GraphHeight,Form1.Left + Form1.Width + 25,10);
    ShowGraph;
    SetHLabel('Period');
    for I := 1 to NumGoods do
      SetLegend(I,'Good '+IntToStr(I)+'Profit');
    SetXAfterDecimalPoint(0);
    SetYAfterDecimalPoint(2);
    SetXYLimits(0,TotalPeriods,0,1);
    Caption := 'Scores';
  end;
end;

Procedure InitializePriceGraph;
const
  GraphHeight = 300;
  GraphWidth = 550;
var
  I : Integer;
begin
  with PriceGraph do begin
    Initialize(GraphWidth,GraphHeight,Form1.Left + Form1.Width +50,350);
    ShowGraph;
    SetHLabel('Period');
    SetLegend(1,'Std Price/Equi Price');
    for I := 1 to NumGoods do
      SetLegend(1+I,'Price/Equi Price Good '+IntToStr(I));
    SetXAfterDecimalPoint(0);
    SetYAfterDecimalPoint(2);
    SetXYLimits(0,TotalPeriods,-1,1);
    Caption := 'Prices';
  end;
end;

Procedure InitializePopGraph;
const
  GraphHeight = 300;
  GraphWidth = 550;
begin
  with PopGraph do begin
    Initialize(GraphWidth,GraphHeight,Form1.Left + Form1.Width + 25,550);
    ShowGraph;
    SetHLabel('Period');
    SetLegend(1,'Good 1 Share');
    SetLegend(2,'Share of Good 2 Producer');
    SetLegend(3,'Share of Good 3 Producer');
    SetLegend(4,'Share of Good 4 Producer');
    SetLegend(5,'Share of Good 5 Producer');
    SetLegend(6,'Share of Good 6 Producer');
    SetXAfterDecimalPoint(0);
    SetYAfterDecimalPoint(2);
    SetXYLimits(0,TotalPeriods,0,0.6);
    Caption := 'Sectoral Shares';
  end;
end;

Procedure InitializeStdDevGraph;
const
  GraphHeight = 300;
  GraphWidth = 550;
begin
  with StdDevGraph do begin
    Initialize(GraphWidth,GraphHeight,Form1.Left-40,300);
    ShowGraph;
    SetHLabel('Period');
    SetLegend(1,'Std Dev of Good 1');
    SetLegend(2,'Std Dev of Good 2');
    SetLegend(3,'Std Dev of Good 3');
    SetLegend(4,'Std Dev of Good 4');
    SetLegend(5,'Std Dev of Good 5');
    SetLegend(6,'Std Dev of Good 6');
    SetXAfterDecimalPoint(0);
    SetYAfterDecimalPoint(2);
    SetXYLimits(0,TotalPeriods,0,1);
    Caption := 'Price Dispersion';
  end;
end;

Function CalculateProducerPriceStdDev(K : Integer) : Real;
var
  I : Integer;
  Ave,R : Real;
begin
  Ave := 0;
  for I := 1 to NumAgentsF[K] do Ave := Ave +
    AgentsF[K,I].Q[K]/AgentsF[K,I].Q[NumGoods];
  Ave := Ave/NumAgentsF[K];
  R := 0;
  for I := 1 to NumAgentsF[K] do
    R := R + (AgentsF[K,I].Q[K]/AgentsF[K,I].Q[NumGoods] - Ave)*
      (AgentsF[K,I].Q[K]/AgentsF[K,I].Q[NumGoods]-Ave);
  CalculateProducerPriceStdDev := Sqrt(R)/NumAgentsF[K];
end;

Procedure CalculateScoreAve;
var
  I,J,K,L : Integer;
begin
  for I := 1 to NumGoods do begin
    AveHPrice[I] := 0;
    ScoreAve[I] := 0;
  end;
  for I := 1 to NumGoods do begin
    for J := 1 to NumAgentsH[I] do begin
      for K := 1 to NumGoods do
        AveHPrice[K] := AveHPrice[K] + AgentsH[I,J].P[K];
        ScoreAve[I] := ScoreAve[I] + AgentsH[I,J].Score;
    end;
  AverageScore := 0;
  for L := 1 to NumGoods do begin
    ScoreAve[L] := ScoreAve[L]/NumAgentsH[L]/NumGoods;
    AverageScore := AverageScore + ScoreAve[L];
    AveHPrice[L] := AveHPrice[L]/NumAgentsH[L]/NumGoods;
    AvePDev[I] := AveHPrice[I]/(OX[NumGoods]/OX[I]);
  end;
  AverageScore := AverageScore/NumGoods;
end;
end;

Procedure CalculateProfitAve;
var
  I,J,K,L : Integer;
begin
  for I := 1 to NumGoods do begin
    AveFPrice[I] := 0;
    ProfitAve[I] := 0;
  end;
  for I := 1 to NumGoods do begin
    for J := 1 to NumAgentsF[I] do begin
      for K := 1 to NumGoods do
        AveFPrice[K] := AveFPrice[K] + AgentsF[I,J].Q[K]/AgentsF[I,J].Q[NumGoods];
        ProfitAve[I] := ProfitAve[I] + AgentsF[I,J].Profit;
    end;
  AverageScore := 0;
  for L := 1 to NumGoods do begin
    ProfitAve[L] := ProfitAve[L]/NumAgentsF[L]/NumGoods;
    AverageProfit := AverageProfit + ProfitAve[L];
    AveFPrice[L] := AveFPrice[L]/NumAgentsF[L]/NumGoods;
  end;
  AverageScore := AverageScore/NumGoods;
end;
end;

Procedure TForm1.Button1Click(Sender: TObject);
var
	I,J,K : Integer;
  R,R1 : Real;
begin
  Running := True;
  Pausing := False;
  MaxLabourTries := StrToInt(MaxLabourBox.Text);
  MaxGoodsTries := StrToInt(MaxGoodsBox.Text);
  ReplacementRate := StrToFloat(ReplacementRateBox.Text);
  ProducerShiftRate := StrToFloat(ProducerShiftRateBox.Text);
  CalcPriceDispersion := CalcPriceDispersionBox.Checked;
  if Assigned(AgentsF) then SetLength(AgentsF,0);
  NumGoods := StrToInt(NumGoodsBox.Text);
  TotalAgentsH := StrToInt(NumAgentsHBox.Text);
  TotalAgentsF := StrToInt(NumAgentsFBox.Text);
  MinWage := StrToInt(MinWageBox.Text);
  SetLength(NumAgentsF,1+NumGoods);
  for I := 1 to NumGoods do
    NumAgentsF[I] := TotalAgentsF;
  SetLength(NumAgentsH,1+NumGoods);
  for I := 1 to NumGoods do
    NumAgentsH[I] := TotalAgentsH;
  TotalAgentsHH := 0;
  TotalAgentsFF := 0;
  for I := 1 to NumGoods do
    TotalAgentsHH := TotalAgentsHH + NumAgentsH[I];
   for I := 1 to NumGoods do
    TotalAgentsFF := TotalAgentsFF + NumAgentsF[I];
  SetLength(AgentsF,NumGoods+1,TotalAgentsF+1);
  SetLength(AgentsH,NumGoods+1,TotalAgentsH+1);
  SetLength(PAgents,NumGoods+1,TotalAgentsF+1);
  SetLength(PGoods,NumGoods+1);
  SetLength(HAgents,NumGoods+1,TotalAgentsH+1);
  SetLength(OX,1+NumGoods);
  SetParameters(OX,NumGoods,OXBox.Text,'OX');
  SetLength(AvePDev,1+NumGoods);
  SetLength(AveHPrice,1+NumGoods);
  SetLength(ScoreAve,1+NumGoods);
  SetLength(AveFPrice,1+NumGoods);
  SetLength(ProfitAve,NumGoods+1);
  TotalPeriods := StrToInt(TotalPeriodsBox.Text);
  CheckPeriod := StrToInt(CheckPeriodBox.Text);
  VarySupply := VarySupplyCkBox.Checked;
  MRate := StrToFloat(MutationRateBox.Text);
  ReproducePeriod := StrToInt(ReproducePeriodBox.Text);

  for I := 1 to NumGoods do
    for J := 1 to NumAgentsF[I] do
      AgentsF[I,J] := AgentF.Init2(I,J);

  for I := 1 to NumGoods do
    for J := 1 to NumAgentsH[I] do
    AgentsH[I,J] := AgentH.Init1(I,J);

  if ShowPayoffsBox.Checked then InitializePayoffsGraph;
  if VarySupply then begin
    if not Assigned(PopGraph) then PopGraph := TXYGraph.Create(Self);
    InitializePopGraph;
  end;
  if CalcPriceDispersion then begin
    if not Assigned(StdDevGraph) then StdDevGraph := TXYGraph.Create(Self);
    InitializeStdDevGraph;
  end;
  if ShowRelPricesBox.Checked then begin
    if not Assigned(PriceGraph) then PriceGraph := TXYGraph.Create(Self);
    InitializePriceGraph;
  end;
  Periods := 0;
  HaltSimulation := False;

  for I := 1 to NumGoods do begin

    for J := 1 to NumAgentsF[I] do
      for K := 1 to NumGoods do AgentsF[I,J].Y[K] := 0;

    for J := 1 to NumAgentsF[I] do
      for K := 1 to NumGoods do AgentsF[I,J].Q[K] := RandomRange(1,NumGoods);

    for J := 1 to NumAgentsF[I] do
      for K := 1 to NumGoods do AgentsF[I,J].Wf[K] := RandomRange(1,NumGoods);

    for J := 1 to NumAgentsH[I] do
      for K := 1 to NumGoods do AgentsH[I,J].X[K] := RandomRange(1,NumGoods);

    for J := 1 to NumAgentsH[I] do
      for K := 1 to NumGoods do AgentsH[I,J].P[K] := RandomRange(1,NumGoods);

    for J := 1 to NumAgentsH[I] do
      for K := 1 to NumGoods do AgentsH[I,J].Wh[K] := RandomRange(1,NumGoods);
  end;

    for I := 1 to TotalPeriods do begin
    Inc(Periods);
	    LabourPlay;
    	GoodsPlay;
      if Periods mod CheckPeriod = 0 then
      CurrentRound.Text := IntToStr(Periods);
    Application.ProcessMessages;
    if HaltSimulation then begin
      Running := False;
      Exit;
    end;
		if Periods mod ReproducePeriod = 0 then begin
      CalculateScoreAve;
      CalculateProfitAve;
      for J := 1 to NumGoods do GetNextGenerationF1(J);
      for J := 1 to NumGoods do GetNextGenerationH1(J);
      if VarySupply then if Random < ProducerShiftRate then ProducerShift;
      if VarySupply then if Random < ProducerShiftRate then LabourShift;
    end;
		if (Periods mod CheckPeriod = 0) or (Periods = TotalPeriods) then begin
      if ShowPayoffsBox.Checked then with XYGraph do begin
        for J := 1 to NumGoods do
          AddPoint(J,Periods,ScoreAve[J]);
      end;
      if ShowRelPricesBox.Checked then with PriceGraph do begin
        R := 0;
        for J := 1 to NumGoods do begin
          R1 := AveHPrice[J];
          R := R + (R1-1)*(R1-1);
          Addpoint(J+1,Periods,R1);
        end;
        AddPoint(1,Periods,10*Sqrt(R)/NumGoods);
        AddPoint(NumGoods+1,Periods,1);
      end;
      if CalcPriceDispersion then with StdDevGraph do begin
        for J := 1 to NumGoods do begin
        Addpoint(J,Periods,CalculateProducerPriceStdDev(J));
      end;
      end;
      if VarySupply then with PopGraph do
        for J := 1 to NumGoods do begin
        AddPoint(J,Periods,NumAgentsH[J]/TotalAgentsHH);
        end;
    end;
    end;
  Running := False;
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
	HaltSimulation := True;
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
	HaltSimulation := True;
  Application.Terminate;
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  HaltSimulation := True;
  Close;
end;

procedure TForm1.Button2MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  HaltSimulation := True;
end;

procedure TForm1.VarySupplyCkBoxClick(Sender: TObject);
begin
  VarySupply := VarySupplyCkBox.Checked;
  ProducerShiftRateBox.Enabled := VarySupply
end;

procedure TForm1.PauseBtnClick(Sender: TObject);
var
  S : String;
begin
  Pausing := not Pausing;
  S := Caption;
  Caption := 'Pausing...';
  while Pausing do begin
    Application.ProcessMessages;
    if HaltSimulation then Break;
  end;
  Caption := S;
end;

initialization
  Randseed := RSeed;
end.
